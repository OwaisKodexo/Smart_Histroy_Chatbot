"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/langchain";
exports.ids = ["vendor-chunks/langchain"];
exports.modules = {

/***/ "(rsc)/./node_modules/langchain/dist/document.js":
/*!*************************************************!*\
  !*** ./node_modules/langchain/dist/document.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Document: () => (/* reexport safe */ _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.Document)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/@langchain/core/documents.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0Ym90LXVpLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2RvY3VtZW50LmpzPzViNmEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgRG9jdW1lbnQgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL2RvY3VtZW50c1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/base.js":
/*!**************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/base.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentLoader: () => (/* binding */ BaseDocumentLoader)\n/* harmony export */ });\n/* harmony import */ var _text_splitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../text_splitter.js */ \"(rsc)/./node_modules/langchain/dist/text_splitter.js\");\n\n/**\n * Abstract class that provides a default implementation for the\n * loadAndSplit() method from the DocumentLoader interface. The load()\n * method is left abstract and needs to be implemented by subclasses.\n */\nclass BaseDocumentLoader {\n    /**\n     * Loads the documents and splits them using a specified text splitter.\n     * @param textSplitter The TextSplitter instance to use for splitting the loaded documents. Defaults to a RecursiveCharacterTextSplitter instance.\n     * @returns A Promise that resolves with an array of Document instances, each split according to the provided TextSplitter.\n     */\n    async loadAndSplit(splitter = new _text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.RecursiveCharacterTextSplitter()) {\n        const docs = await this.load();\n        return splitter.splitDocuments(docs);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNFO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsNkVBQThCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hhdGJvdC11aS8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9kb2N1bWVudF9sb2FkZXJzL2Jhc2UuanM/ZDE2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIsIH0gZnJvbSBcIi4uL3RleHRfc3BsaXR0ZXIuanNcIjtcbi8qKlxuICogQWJzdHJhY3QgY2xhc3MgdGhhdCBwcm92aWRlcyBhIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZm9yIHRoZVxuICogbG9hZEFuZFNwbGl0KCkgbWV0aG9kIGZyb20gdGhlIERvY3VtZW50TG9hZGVyIGludGVyZmFjZS4gVGhlIGxvYWQoKVxuICogbWV0aG9kIGlzIGxlZnQgYWJzdHJhY3QgYW5kIG5lZWRzIHRvIGJlIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlRG9jdW1lbnRMb2FkZXIge1xuICAgIC8qKlxuICAgICAqIExvYWRzIHRoZSBkb2N1bWVudHMgYW5kIHNwbGl0cyB0aGVtIHVzaW5nIGEgc3BlY2lmaWVkIHRleHQgc3BsaXR0ZXIuXG4gICAgICogQHBhcmFtIHRleHRTcGxpdHRlciBUaGUgVGV4dFNwbGl0dGVyIGluc3RhbmNlIHRvIHVzZSBmb3Igc3BsaXR0aW5nIHRoZSBsb2FkZWQgZG9jdW1lbnRzLiBEZWZhdWx0cyB0byBhIFJlY3Vyc2l2ZUNoYXJhY3RlclRleHRTcGxpdHRlciBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGFuIGFycmF5IG9mIERvY3VtZW50IGluc3RhbmNlcywgZWFjaCBzcGxpdCBhY2NvcmRpbmcgdG8gdGhlIHByb3ZpZGVkIFRleHRTcGxpdHRlci5cbiAgICAgKi9cbiAgICBhc3luYyBsb2FkQW5kU3BsaXQoc3BsaXR0ZXIgPSBuZXcgUmVjdXJzaXZlQ2hhcmFjdGVyVGV4dFNwbGl0dGVyKCkpIHtcbiAgICAgICAgY29uc3QgZG9jcyA9IGF3YWl0IHRoaXMubG9hZCgpO1xuICAgICAgICByZXR1cm4gc3BsaXR0ZXIuc3BsaXREb2N1bWVudHMoZG9jcyk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/buffer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/fs/buffer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferLoader: () => (/* binding */ BufferLoader)\n/* harmony export */ });\n/* harmony import */ var _util_env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/env.js */ \"(rsc)/./node_modules/langchain/dist/util/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/base.js\");\n\n\n/**\n * Abstract class that extends the `BaseDocumentLoader` class. It\n * represents a document loader that loads documents from a buffer. The\n * `load()` method is implemented to read the buffer contents and metadata\n * based on the type of `filePathOrBlob`, and then calls the `parse()`\n * method to parse the buffer and return the documents.\n */\nclass BufferLoader extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseDocumentLoader {\n    constructor(filePathOrBlob) {\n        super();\n        Object.defineProperty(this, \"filePathOrBlob\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: filePathOrBlob\n        });\n    }\n    /**\n     * Method that reads the buffer contents and metadata based on the type of\n     * `filePathOrBlob`, and then calls the `parse()` method to parse the\n     * buffer and return the documents.\n     * @returns Promise that resolves with an array of `Document` objects.\n     */\n    async load() {\n        let buffer;\n        let metadata;\n        if (typeof this.filePathOrBlob === \"string\") {\n            const { readFile } = await BufferLoader.imports();\n            buffer = await readFile(this.filePathOrBlob);\n            metadata = { source: this.filePathOrBlob };\n        }\n        else {\n            buffer = await this.filePathOrBlob\n                .arrayBuffer()\n                .then((ab) => Buffer.from(ab));\n            metadata = { source: \"blob\", blobType: this.filePathOrBlob.type };\n        }\n        return this.parse(buffer, metadata);\n    }\n    /**\n     * Static method that imports the `readFile` function from the\n     * `fs/promises` module in Node.js. It is used to dynamically import the\n     * function when needed. If the import fails, it throws an error\n     * indicating that the `fs/promises` module is not available in the\n     * current environment.\n     * @returns Promise that resolves with an object containing the `readFile` function.\n     */\n    static async imports() {\n        try {\n            const { readFile } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:fs/promises */ \"node:fs/promises\", 19));\n            return { readFile };\n        }\n        catch (e) {\n            console.error(e);\n            throw new Error(`Failed to load fs/promises. TextLoader available only on environment 'node'. It appears you are running environment '${(0,_util_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnv)()}'. See https://<link to docs> for alternatives.`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9mcy9idWZmZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJDO0FBQ0s7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywyQkFBMkIsd0RBQWtCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsV0FBVztBQUMvQjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFdBQVcsUUFBUSxzSUFBMEI7QUFDakUscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLG9KQUFvSixvREFBTSxHQUFHO0FBQzdKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRib3QtdWkvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9mcy9idWZmZXIuanM/MDU4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRFbnYgfSBmcm9tIFwiLi4vLi4vdXRpbC9lbnYuanNcIjtcbmltcG9ydCB7IEJhc2VEb2N1bWVudExvYWRlciB9IGZyb20gXCIuLi9iYXNlLmpzXCI7XG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIHRoYXQgZXh0ZW5kcyB0aGUgYEJhc2VEb2N1bWVudExvYWRlcmAgY2xhc3MuIEl0XG4gKiByZXByZXNlbnRzIGEgZG9jdW1lbnQgbG9hZGVyIHRoYXQgbG9hZHMgZG9jdW1lbnRzIGZyb20gYSBidWZmZXIuIFRoZVxuICogYGxvYWQoKWAgbWV0aG9kIGlzIGltcGxlbWVudGVkIHRvIHJlYWQgdGhlIGJ1ZmZlciBjb250ZW50cyBhbmQgbWV0YWRhdGFcbiAqIGJhc2VkIG9uIHRoZSB0eXBlIG9mIGBmaWxlUGF0aE9yQmxvYmAsIGFuZCB0aGVuIGNhbGxzIHRoZSBgcGFyc2UoKWBcbiAqIG1ldGhvZCB0byBwYXJzZSB0aGUgYnVmZmVyIGFuZCByZXR1cm4gdGhlIGRvY3VtZW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEJ1ZmZlckxvYWRlciBleHRlbmRzIEJhc2VEb2N1bWVudExvYWRlciB7XG4gICAgY29uc3RydWN0b3IoZmlsZVBhdGhPckJsb2IpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZmlsZVBhdGhPckJsb2JcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGZpbGVQYXRoT3JCbG9iXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdGhhdCByZWFkcyB0aGUgYnVmZmVyIGNvbnRlbnRzIGFuZCBtZXRhZGF0YSBiYXNlZCBvbiB0aGUgdHlwZSBvZlxuICAgICAqIGBmaWxlUGF0aE9yQmxvYmAsIGFuZCB0aGVuIGNhbGxzIHRoZSBgcGFyc2UoKWAgbWV0aG9kIHRvIHBhcnNlIHRoZVxuICAgICAqIGJ1ZmZlciBhbmQgcmV0dXJuIHRoZSBkb2N1bWVudHMuXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYW4gYXJyYXkgb2YgYERvY3VtZW50YCBvYmplY3RzLlxuICAgICAqL1xuICAgIGFzeW5jIGxvYWQoKSB7XG4gICAgICAgIGxldCBidWZmZXI7XG4gICAgICAgIGxldCBtZXRhZGF0YTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZpbGVQYXRoT3JCbG9iID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCB7IHJlYWRGaWxlIH0gPSBhd2FpdCBCdWZmZXJMb2FkZXIuaW1wb3J0cygpO1xuICAgICAgICAgICAgYnVmZmVyID0gYXdhaXQgcmVhZEZpbGUodGhpcy5maWxlUGF0aE9yQmxvYik7XG4gICAgICAgICAgICBtZXRhZGF0YSA9IHsgc291cmNlOiB0aGlzLmZpbGVQYXRoT3JCbG9iIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBidWZmZXIgPSBhd2FpdCB0aGlzLmZpbGVQYXRoT3JCbG9iXG4gICAgICAgICAgICAgICAgLmFycmF5QnVmZmVyKClcbiAgICAgICAgICAgICAgICAudGhlbigoYWIpID0+IEJ1ZmZlci5mcm9tKGFiKSk7XG4gICAgICAgICAgICBtZXRhZGF0YSA9IHsgc291cmNlOiBcImJsb2JcIiwgYmxvYlR5cGU6IHRoaXMuZmlsZVBhdGhPckJsb2IudHlwZSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlKGJ1ZmZlciwgbWV0YWRhdGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGF0aWMgbWV0aG9kIHRoYXQgaW1wb3J0cyB0aGUgYHJlYWRGaWxlYCBmdW5jdGlvbiBmcm9tIHRoZVxuICAgICAqIGBmcy9wcm9taXNlc2AgbW9kdWxlIGluIE5vZGUuanMuIEl0IGlzIHVzZWQgdG8gZHluYW1pY2FsbHkgaW1wb3J0IHRoZVxuICAgICAqIGZ1bmN0aW9uIHdoZW4gbmVlZGVkLiBJZiB0aGUgaW1wb3J0IGZhaWxzLCBpdCB0aHJvd3MgYW4gZXJyb3JcbiAgICAgKiBpbmRpY2F0aW5nIHRoYXQgdGhlIGBmcy9wcm9taXNlc2AgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlXG4gICAgICogY3VycmVudCBlbnZpcm9ubWVudC5cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHJlYWRGaWxlYCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgaW1wb3J0cygpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgcmVhZEZpbGUgfSA9IGF3YWl0IGltcG9ydChcIm5vZGU6ZnMvcHJvbWlzZXNcIik7XG4gICAgICAgICAgICByZXR1cm4geyByZWFkRmlsZSB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gbG9hZCBmcy9wcm9taXNlcy4gVGV4dExvYWRlciBhdmFpbGFibGUgb25seSBvbiBlbnZpcm9ubWVudCAnbm9kZScuIEl0IGFwcGVhcnMgeW91IGFyZSBydW5uaW5nIGVudmlyb25tZW50ICcke2dldEVudigpfScuIFNlZSBodHRwczovLzxsaW5rIHRvIGRvY3M+IGZvciBhbHRlcm5hdGl2ZXMuYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/fs/buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/csv.js":
/*!****************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/fs/csv.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CSVLoader: () => (/* binding */ CSVLoader)\n/* harmony export */ });\n/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/fs/text.js\");\n\n/**\n * A class that extends the TextLoader class. It represents a document\n * loader that loads documents from a CSV file. It has a constructor that\n * takes a `filePathOrBlob` parameter representing the path to the CSV\n * file or a Blob object, and an optional `options` parameter of type\n * `CSVLoaderOptions` or a string representing the column to use as the\n * document's pageContent.\n */\nclass CSVLoader extends _text_js__WEBPACK_IMPORTED_MODULE_0__.TextLoader {\n    constructor(filePathOrBlob, options) {\n        super(filePathOrBlob);\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        if (typeof options === \"string\") {\n            this.options = { column: options };\n        }\n        else {\n            this.options = options ?? this.options;\n        }\n    }\n    /**\n     * A protected method that parses the raw CSV data and returns an array of\n     * strings representing the pageContent of each document. It uses the\n     * `dsvFormat` function from the `d3-dsv` module to parse the CSV data. If\n     * the `column` option is specified, it checks if the column exists in the\n     * CSV file and returns the values of that column as the pageContent. If\n     * the `column` option is not specified, it converts each row of the CSV\n     * data into key/value pairs and joins them with newline characters.\n     * @param raw The raw CSV data to be parsed.\n     * @returns An array of strings representing the pageContent of each document.\n     */\n    async parse(raw) {\n        const { column, separator = \",\" } = this.options;\n        const { dsvFormat } = await CSVLoaderImports();\n        const psv = dsvFormat(separator);\n        const parsed = psv.parse(raw.trim());\n        if (column !== undefined) {\n            if (!parsed.columns.includes(column)) {\n                throw new Error(`Column ${column} not found in CSV file.`);\n            }\n            // Note TextLoader will raise an exception if the value is null.\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return parsed.map((row) => row[column]);\n        }\n        return parsed.map((row) => Object.keys(row)\n            .map((key) => `${key.trim()}: ${row[key]?.trim()}`)\n            .join(\"\\n\"));\n    }\n}\nasync function CSVLoaderImports() {\n    try {\n        const { dsvFormat } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/d3-dsv\").then(__webpack_require__.bind(__webpack_require__, /*! d3-dsv */ \"(rsc)/./node_modules/d3-dsv/src/index.js\"));\n        return { dsvFormat };\n    }\n    catch (e) {\n        console.error(e);\n        throw new Error(\"Please install d3-dsv as a dependency with, e.g. `yarn add d3-dsv@2`\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9mcy9jc3YuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHdCQUF3QixnREFBVTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBCQUEwQjtBQUMxQyxnQkFBZ0IsWUFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxRQUFRO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixXQUFXLElBQUksaUJBQWlCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsWUFBWSxRQUFRLDJLQUFnQjtBQUNwRCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hhdGJvdC11aS8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9kb2N1bWVudF9sb2FkZXJzL2ZzL2Nzdi5qcz8xMWNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRleHRMb2FkZXIgfSBmcm9tIFwiLi90ZXh0LmpzXCI7XG4vKipcbiAqIEEgY2xhc3MgdGhhdCBleHRlbmRzIHRoZSBUZXh0TG9hZGVyIGNsYXNzLiBJdCByZXByZXNlbnRzIGEgZG9jdW1lbnRcbiAqIGxvYWRlciB0aGF0IGxvYWRzIGRvY3VtZW50cyBmcm9tIGEgQ1NWIGZpbGUuIEl0IGhhcyBhIGNvbnN0cnVjdG9yIHRoYXRcbiAqIHRha2VzIGEgYGZpbGVQYXRoT3JCbG9iYCBwYXJhbWV0ZXIgcmVwcmVzZW50aW5nIHRoZSBwYXRoIHRvIHRoZSBDU1ZcbiAqIGZpbGUgb3IgYSBCbG9iIG9iamVjdCwgYW5kIGFuIG9wdGlvbmFsIGBvcHRpb25zYCBwYXJhbWV0ZXIgb2YgdHlwZVxuICogYENTVkxvYWRlck9wdGlvbnNgIG9yIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY29sdW1uIHRvIHVzZSBhcyB0aGVcbiAqIGRvY3VtZW50J3MgcGFnZUNvbnRlbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBDU1ZMb2FkZXIgZXh0ZW5kcyBUZXh0TG9hZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWxlUGF0aE9yQmxvYiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihmaWxlUGF0aE9yQmxvYik7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm9wdGlvbnNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHt9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHsgY29sdW1uOiBvcHRpb25zIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID8/IHRoaXMub3B0aW9ucztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb3RlY3RlZCBtZXRob2QgdGhhdCBwYXJzZXMgdGhlIHJhdyBDU1YgZGF0YSBhbmQgcmV0dXJucyBhbiBhcnJheSBvZlxuICAgICAqIHN0cmluZ3MgcmVwcmVzZW50aW5nIHRoZSBwYWdlQ29udGVudCBvZiBlYWNoIGRvY3VtZW50LiBJdCB1c2VzIHRoZVxuICAgICAqIGBkc3ZGb3JtYXRgIGZ1bmN0aW9uIGZyb20gdGhlIGBkMy1kc3ZgIG1vZHVsZSB0byBwYXJzZSB0aGUgQ1NWIGRhdGEuIElmXG4gICAgICogdGhlIGBjb2x1bW5gIG9wdGlvbiBpcyBzcGVjaWZpZWQsIGl0IGNoZWNrcyBpZiB0aGUgY29sdW1uIGV4aXN0cyBpbiB0aGVcbiAgICAgKiBDU1YgZmlsZSBhbmQgcmV0dXJucyB0aGUgdmFsdWVzIG9mIHRoYXQgY29sdW1uIGFzIHRoZSBwYWdlQ29udGVudC4gSWZcbiAgICAgKiB0aGUgYGNvbHVtbmAgb3B0aW9uIGlzIG5vdCBzcGVjaWZpZWQsIGl0IGNvbnZlcnRzIGVhY2ggcm93IG9mIHRoZSBDU1ZcbiAgICAgKiBkYXRhIGludG8ga2V5L3ZhbHVlIHBhaXJzIGFuZCBqb2lucyB0aGVtIHdpdGggbmV3bGluZSBjaGFyYWN0ZXJzLlxuICAgICAqIEBwYXJhbSByYXcgVGhlIHJhdyBDU1YgZGF0YSB0byBiZSBwYXJzZWQuXG4gICAgICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncyByZXByZXNlbnRpbmcgdGhlIHBhZ2VDb250ZW50IG9mIGVhY2ggZG9jdW1lbnQuXG4gICAgICovXG4gICAgYXN5bmMgcGFyc2UocmF3KSB7XG4gICAgICAgIGNvbnN0IHsgY29sdW1uLCBzZXBhcmF0b3IgPSBcIixcIiB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IGRzdkZvcm1hdCB9ID0gYXdhaXQgQ1NWTG9hZGVySW1wb3J0cygpO1xuICAgICAgICBjb25zdCBwc3YgPSBkc3ZGb3JtYXQoc2VwYXJhdG9yKTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gcHN2LnBhcnNlKHJhdy50cmltKCkpO1xuICAgICAgICBpZiAoY29sdW1uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICghcGFyc2VkLmNvbHVtbnMuaW5jbHVkZXMoY29sdW1uKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29sdW1uICR7Y29sdW1ufSBub3QgZm91bmQgaW4gQ1NWIGZpbGUuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBOb3RlIFRleHRMb2FkZXIgd2lsbCByYWlzZSBhbiBleGNlcHRpb24gaWYgdGhlIHZhbHVlIGlzIG51bGwuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZC5tYXAoKHJvdykgPT4gcm93W2NvbHVtbl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQubWFwKChyb3cpID0+IE9iamVjdC5rZXlzKHJvdylcbiAgICAgICAgICAgIC5tYXAoKGtleSkgPT4gYCR7a2V5LnRyaW0oKX06ICR7cm93W2tleV0/LnRyaW0oKX1gKVxuICAgICAgICAgICAgLmpvaW4oXCJcXG5cIikpO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIENTVkxvYWRlckltcG9ydHMoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBkc3ZGb3JtYXQgfSA9IGF3YWl0IGltcG9ydChcImQzLWRzdlwiKTtcbiAgICAgICAgcmV0dXJuIHsgZHN2Rm9ybWF0IH07XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBpbnN0YWxsIGQzLWRzdiBhcyBhIGRlcGVuZGVuY3kgd2l0aCwgZS5nLiBgeWFybiBhZGQgZDMtZHN2QDJgXCIpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/fs/csv.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/json.js":
/*!*****************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/fs/json.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JSONLinesLoader: () => (/* binding */ JSONLinesLoader),\n/* harmony export */   JSONLoader: () => (/* binding */ JSONLoader)\n/* harmony export */ });\n/* harmony import */ var jsonpointer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonpointer */ \"(rsc)/./node_modules/jsonpointer/jsonpointer.js\");\n/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./text.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/fs/text.js\");\n\n\n/**\n * Class that extends the `TextLoader` class. It represents a document\n * loader that loads documents from JSON files. It has a constructor that\n * takes a `filePathOrBlob` parameter representing the path to the JSON\n * file or a `Blob` object, and an optional `pointers` parameter that\n * specifies the JSON pointers to extract.\n */\nclass JSONLoader extends _text_js__WEBPACK_IMPORTED_MODULE_1__.TextLoader {\n    constructor(filePathOrBlob, pointers = []) {\n        super(filePathOrBlob);\n        Object.defineProperty(this, \"pointers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.pointers = Array.isArray(pointers) ? pointers : [pointers];\n    }\n    /**\n     * Method that takes a `raw` string as a parameter and returns a promise\n     * that resolves to an array of strings. It parses the raw JSON string and\n     * extracts the values based on the specified JSON pointers. If no JSON\n     * pointers are specified, it extracts all the strings from the JSON\n     * object.\n     * @param raw The raw JSON string to parse.\n     * @returns A promise that resolves to an array of strings.\n     */\n    async parse(raw) {\n        const json = JSON.parse(raw.trim());\n        // If there is no pointers specified we extract all strings we found\n        const extractAllStrings = !(this.pointers.length > 0);\n        const compiledPointers = this.pointers.map((pointer) => jsonpointer__WEBPACK_IMPORTED_MODULE_0__.compile(pointer));\n        return this.extractArrayStringsFromObject(json, compiledPointers, extractAllStrings);\n    }\n    /**\n     * If JSON pointers are specified, return all strings below any of them\n     * and exclude all other nodes expect if they match a JSON pointer (to allow to extract strings from different levels)\n     *\n     * If no JSON pointer is specified then return all string in the object\n     */\n    extractArrayStringsFromObject(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    json, pointers, extractAllStrings = false, keyHasBeenFound = false) {\n        if (!json) {\n            return [];\n        }\n        if (typeof json === \"string\" && extractAllStrings) {\n            return [json];\n        }\n        if (Array.isArray(json) && extractAllStrings) {\n            let extractedString = [];\n            for (const element of json) {\n                extractedString = extractedString.concat(this.extractArrayStringsFromObject(element, pointers, true));\n            }\n            return extractedString;\n        }\n        if (typeof json === \"object\") {\n            if (extractAllStrings) {\n                return this.extractArrayStringsFromObject(Object.values(json), pointers, true);\n            }\n            const targetedEntries = this.getTargetedEntries(json, pointers);\n            const thisLevelEntries = Object.values(json);\n            const notTargetedEntries = thisLevelEntries.filter((entry) => !targetedEntries.includes(entry));\n            let extractedStrings = [];\n            // If we found a targeted entry, we extract all strings from it\n            if (targetedEntries.length > 0) {\n                for (const oneEntry of targetedEntries) {\n                    extractedStrings = extractedStrings.concat(this.extractArrayStringsFromObject(oneEntry, pointers, true, true));\n                }\n                for (const oneEntry of notTargetedEntries) {\n                    extractedStrings = extractedStrings.concat(this.extractArrayStringsFromObject(oneEntry, pointers, false, true));\n                }\n            }\n            else if (extractAllStrings || !keyHasBeenFound) {\n                for (const oneEntry of notTargetedEntries) {\n                    extractedStrings = extractedStrings.concat(this.extractArrayStringsFromObject(oneEntry, pointers, extractAllStrings));\n                }\n            }\n            return extractedStrings;\n        }\n        return [];\n    }\n    /**\n     * Method that takes a `json` object and an array of `pointers` as\n     * parameters and returns an array of targeted entries. It iterates over\n     * the JSON pointers and uses the `jsonpointer.get()` function to get the\n     * targeted entries from the JSON object.\n     * @param json The JSON object to get targeted entries from.\n     * @param pointers The JSON pointers to get targeted entries.\n     * @returns An array of targeted entries.\n     */\n    getTargetedEntries(json, pointers) {\n        const targetEntries = [];\n        for (const pointer of pointers) {\n            const targetedEntry = pointer.get(json);\n            if (targetedEntry) {\n                targetEntries.push(targetedEntry);\n            }\n        }\n        return targetEntries;\n    }\n}\n/**\n * Class that extends the `TextLoader` class. It represents a document\n * loader that loads documents from JSON Lines files. It has a constructor\n * that takes a `filePathOrBlob` parameter representing the path to the\n * JSON Lines file or a `Blob` object, and a `pointer` parameter that\n * specifies the JSON pointer to extract.\n */\nclass JSONLinesLoader extends _text_js__WEBPACK_IMPORTED_MODULE_1__.TextLoader {\n    constructor(filePathOrBlob, pointer) {\n        super(filePathOrBlob);\n        Object.defineProperty(this, \"pointer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: pointer\n        });\n    }\n    /**\n     * Method that takes a `raw` string as a parameter and returns a promise\n     * that resolves to an array of strings. It parses the raw JSON Lines\n     * string, splits it into lines, parses each line as JSON, and extracts\n     * the values based on the specified JSON pointer.\n     * @param raw The raw JSON Lines string to parse.\n     * @returns A promise that resolves to an array of strings.\n     */\n    async parse(raw) {\n        const lines = raw.split(\"\\n\");\n        const jsons = lines\n            .map((line) => line.trim())\n            .filter(Boolean)\n            .map((line) => JSON.parse(line));\n        const pointer = jsonpointer__WEBPACK_IMPORTED_MODULE_0__.compile(this.pointer);\n        return jsons.map((json) => pointer.get(json));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/fs/json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/pdf.js":
/*!****************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/fs/pdf.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PDFLoader: () => (/* binding */ PDFLoader)\n/* harmony export */ });\n/* harmony import */ var _document_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../document.js */ \"(rsc)/./node_modules/langchain/dist/document.js\");\n/* harmony import */ var _buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buffer.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/fs/buffer.js\");\n/* harmony import */ var _util_document_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/document.js */ \"(rsc)/./node_modules/langchain/dist/util/document.js\");\n\n\n\n/**\n * A class that extends the `BufferLoader` class. It represents a document\n * loader that loads documents from PDF files.\n * @example\n * ```typescript\n * const loader = new PDFLoader(\"path/to/bitcoin.pdf\");\n * const docs = await loader.load();\n * console.log({ docs });\n * ```\n */\nclass PDFLoader extends _buffer_js__WEBPACK_IMPORTED_MODULE_1__.BufferLoader {\n    constructor(filePathOrBlob, { splitPages = true, pdfjs = PDFLoaderImports, parsedItemSeparator = \"\", } = {}) {\n        super(filePathOrBlob);\n        Object.defineProperty(this, \"splitPages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"pdfjs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"parsedItemSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.splitPages = splitPages;\n        this.pdfjs = pdfjs;\n        this.parsedItemSeparator = parsedItemSeparator;\n    }\n    /**\n     * A method that takes a `raw` buffer and `metadata` as parameters and\n     * returns a promise that resolves to an array of `Document` instances. It\n     * uses the `getDocument` function from the PDF.js library to load the PDF\n     * from the buffer. It then iterates over each page of the PDF, retrieves\n     * the text content using the `getTextContent` method, and joins the text\n     * items to form the page content. It creates a new `Document` instance\n     * for each page with the extracted text content and metadata, and adds it\n     * to the `documents` array. If `splitPages` is `true`, it returns the\n     * array of `Document` instances. Otherwise, if there are no documents, it\n     * returns an empty array. Otherwise, it concatenates the page content of\n     * all documents and creates a single `Document` instance with the\n     * concatenated content.\n     * @param raw The buffer to be parsed.\n     * @param metadata The metadata of the document.\n     * @returns A promise that resolves to an array of `Document` instances.\n     */\n    async parse(raw, metadata) {\n        const { getDocument, version } = await this.pdfjs();\n        const pdf = await getDocument({\n            data: new Uint8Array(raw.buffer),\n            useWorkerFetch: false,\n            isEvalSupported: false,\n            useSystemFonts: true,\n        }).promise;\n        const meta = await pdf.getMetadata().catch(() => null);\n        const documents = [];\n        for (let i = 1; i <= pdf.numPages; i += 1) {\n            const page = await pdf.getPage(i);\n            const content = await page.getTextContent();\n            if (content.items.length === 0) {\n                continue;\n            }\n            // Eliminate excessive newlines\n            // Source: https://github.com/albertcui/pdf-parse/blob/7086fc1cc9058545cdf41dd0646d6ae5832c7107/lib/pdf-parse.js#L16\n            let lastY;\n            const textItems = [];\n            for (const item of content.items) {\n                if (\"str\" in item) {\n                    if (lastY === item.transform[5] || !lastY) {\n                        textItems.push(item.str);\n                    }\n                    else {\n                        textItems.push(`\\n${item.str}`);\n                    }\n                    // eslint-disable-next-line prefer-destructuring\n                    lastY = item.transform[5];\n                }\n            }\n            const text = textItems.join(this.parsedItemSeparator);\n            documents.push(new _document_js__WEBPACK_IMPORTED_MODULE_0__.Document({\n                pageContent: text,\n                metadata: {\n                    ...metadata,\n                    pdf: {\n                        version,\n                        info: meta?.info,\n                        metadata: meta?.metadata,\n                        totalPages: pdf.numPages,\n                    },\n                    loc: {\n                        pageNumber: i,\n                    },\n                },\n            }));\n        }\n        if (this.splitPages) {\n            return documents;\n        }\n        if (documents.length === 0) {\n            return [];\n        }\n        return [\n            new _document_js__WEBPACK_IMPORTED_MODULE_0__.Document({\n                pageContent: (0,_util_document_js__WEBPACK_IMPORTED_MODULE_2__.formatDocumentsAsString)(documents),\n                metadata: {\n                    ...metadata,\n                    pdf: {\n                        version,\n                        info: meta?.info,\n                        metadata: meta?.metadata,\n                        totalPages: pdf.numPages,\n                    },\n                },\n            }),\n        ];\n    }\n}\nasync function PDFLoaderImports() {\n    try {\n        const { default: mod } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/pdf-parse\").then(__webpack_require__.t.bind(__webpack_require__, /*! pdf-parse/lib/pdf.js/v1.10.100/build/pdf.js */ \"(rsc)/./node_modules/pdf-parse/lib/pdf.js/v1.10.100/build/pdf.js\", 19));\n        const { getDocument, version } = mod;\n        return { getDocument, version };\n    }\n    catch (e) {\n        console.error(e);\n        throw new Error(\"Failed to load pdf-parse. Please install it with eg. `npm install pdf-parse`.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9mcy9wZGYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2QztBQUNGO0FBQ3NCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNPLHdCQUF3QixvREFBWTtBQUMzQyxrQ0FBa0MseUVBQXlFLElBQUk7QUFDL0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix1QkFBdUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esd0JBQXdCLG1CQUFtQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsU0FBUztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isa0RBQVE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixrREFBUTtBQUN4Qiw2QkFBNkIsMEVBQXVCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixlQUFlLFFBQVEsaVBBQXFEO0FBQzVGLGdCQUFnQix1QkFBdUI7QUFDdkMsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRib3QtdWkvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9mcy9wZGYuanM/NjE0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb2N1bWVudCB9IGZyb20gXCIuLi8uLi9kb2N1bWVudC5qc1wiO1xuaW1wb3J0IHsgQnVmZmVyTG9hZGVyIH0gZnJvbSBcIi4vYnVmZmVyLmpzXCI7XG5pbXBvcnQgeyBmb3JtYXREb2N1bWVudHNBc1N0cmluZyB9IGZyb20gXCIuLi8uLi91dGlsL2RvY3VtZW50LmpzXCI7XG4vKipcbiAqIEEgY2xhc3MgdGhhdCBleHRlbmRzIHRoZSBgQnVmZmVyTG9hZGVyYCBjbGFzcy4gSXQgcmVwcmVzZW50cyBhIGRvY3VtZW50XG4gKiBsb2FkZXIgdGhhdCBsb2FkcyBkb2N1bWVudHMgZnJvbSBQREYgZmlsZXMuXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgbG9hZGVyID0gbmV3IFBERkxvYWRlcihcInBhdGgvdG8vYml0Y29pbi5wZGZcIik7XG4gKiBjb25zdCBkb2NzID0gYXdhaXQgbG9hZGVyLmxvYWQoKTtcbiAqIGNvbnNvbGUubG9nKHsgZG9jcyB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgUERGTG9hZGVyIGV4dGVuZHMgQnVmZmVyTG9hZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWxlUGF0aE9yQmxvYiwgeyBzcGxpdFBhZ2VzID0gdHJ1ZSwgcGRmanMgPSBQREZMb2FkZXJJbXBvcnRzLCBwYXJzZWRJdGVtU2VwYXJhdG9yID0gXCJcIiwgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGZpbGVQYXRoT3JCbG9iKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic3BsaXRQYWdlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJwZGZqc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJwYXJzZWRJdGVtU2VwYXJhdG9yXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3BsaXRQYWdlcyA9IHNwbGl0UGFnZXM7XG4gICAgICAgIHRoaXMucGRmanMgPSBwZGZqcztcbiAgICAgICAgdGhpcy5wYXJzZWRJdGVtU2VwYXJhdG9yID0gcGFyc2VkSXRlbVNlcGFyYXRvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBtZXRob2QgdGhhdCB0YWtlcyBhIGByYXdgIGJ1ZmZlciBhbmQgYG1ldGFkYXRhYCBhcyBwYXJhbWV0ZXJzIGFuZFxuICAgICAqIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gYXJyYXkgb2YgYERvY3VtZW50YCBpbnN0YW5jZXMuIEl0XG4gICAgICogdXNlcyB0aGUgYGdldERvY3VtZW50YCBmdW5jdGlvbiBmcm9tIHRoZSBQREYuanMgbGlicmFyeSB0byBsb2FkIHRoZSBQREZcbiAgICAgKiBmcm9tIHRoZSBidWZmZXIuIEl0IHRoZW4gaXRlcmF0ZXMgb3ZlciBlYWNoIHBhZ2Ugb2YgdGhlIFBERiwgcmV0cmlldmVzXG4gICAgICogdGhlIHRleHQgY29udGVudCB1c2luZyB0aGUgYGdldFRleHRDb250ZW50YCBtZXRob2QsIGFuZCBqb2lucyB0aGUgdGV4dFxuICAgICAqIGl0ZW1zIHRvIGZvcm0gdGhlIHBhZ2UgY29udGVudC4gSXQgY3JlYXRlcyBhIG5ldyBgRG9jdW1lbnRgIGluc3RhbmNlXG4gICAgICogZm9yIGVhY2ggcGFnZSB3aXRoIHRoZSBleHRyYWN0ZWQgdGV4dCBjb250ZW50IGFuZCBtZXRhZGF0YSwgYW5kIGFkZHMgaXRcbiAgICAgKiB0byB0aGUgYGRvY3VtZW50c2AgYXJyYXkuIElmIGBzcGxpdFBhZ2VzYCBpcyBgdHJ1ZWAsIGl0IHJldHVybnMgdGhlXG4gICAgICogYXJyYXkgb2YgYERvY3VtZW50YCBpbnN0YW5jZXMuIE90aGVyd2lzZSwgaWYgdGhlcmUgYXJlIG5vIGRvY3VtZW50cywgaXRcbiAgICAgKiByZXR1cm5zIGFuIGVtcHR5IGFycmF5LiBPdGhlcndpc2UsIGl0IGNvbmNhdGVuYXRlcyB0aGUgcGFnZSBjb250ZW50IG9mXG4gICAgICogYWxsIGRvY3VtZW50cyBhbmQgY3JlYXRlcyBhIHNpbmdsZSBgRG9jdW1lbnRgIGluc3RhbmNlIHdpdGggdGhlXG4gICAgICogY29uY2F0ZW5hdGVkIGNvbnRlbnQuXG4gICAgICogQHBhcmFtIHJhdyBUaGUgYnVmZmVyIHRvIGJlIHBhcnNlZC5cbiAgICAgKiBAcGFyYW0gbWV0YWRhdGEgVGhlIG1ldGFkYXRhIG9mIHRoZSBkb2N1bWVudC5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBvZiBgRG9jdW1lbnRgIGluc3RhbmNlcy5cbiAgICAgKi9cbiAgICBhc3luYyBwYXJzZShyYXcsIG1ldGFkYXRhKSB7XG4gICAgICAgIGNvbnN0IHsgZ2V0RG9jdW1lbnQsIHZlcnNpb24gfSA9IGF3YWl0IHRoaXMucGRmanMoKTtcbiAgICAgICAgY29uc3QgcGRmID0gYXdhaXQgZ2V0RG9jdW1lbnQoe1xuICAgICAgICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkocmF3LmJ1ZmZlciksXG4gICAgICAgICAgICB1c2VXb3JrZXJGZXRjaDogZmFsc2UsXG4gICAgICAgICAgICBpc0V2YWxTdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgdXNlU3lzdGVtRm9udHM6IHRydWUsXG4gICAgICAgIH0pLnByb21pc2U7XG4gICAgICAgIGNvbnN0IG1ldGEgPSBhd2FpdCBwZGYuZ2V0TWV0YWRhdGEoKS5jYXRjaCgoKSA9PiBudWxsKTtcbiAgICAgICAgY29uc3QgZG9jdW1lbnRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHBkZi5udW1QYWdlczsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBwYWdlID0gYXdhaXQgcGRmLmdldFBhZ2UoaSk7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgcGFnZS5nZXRUZXh0Q29udGVudCgpO1xuICAgICAgICAgICAgaWYgKGNvbnRlbnQuaXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBFbGltaW5hdGUgZXhjZXNzaXZlIG5ld2xpbmVzXG4gICAgICAgICAgICAvLyBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbGJlcnRjdWkvcGRmLXBhcnNlL2Jsb2IvNzA4NmZjMWNjOTA1ODU0NWNkZjQxZGQwNjQ2ZDZhZTU4MzJjNzEwNy9saWIvcGRmLXBhcnNlLmpzI0wxNlxuICAgICAgICAgICAgbGV0IGxhc3RZO1xuICAgICAgICAgICAgY29uc3QgdGV4dEl0ZW1zID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgY29udGVudC5pdGVtcykge1xuICAgICAgICAgICAgICAgIGlmIChcInN0clwiIGluIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RZID09PSBpdGVtLnRyYW5zZm9ybVs1XSB8fCAhbGFzdFkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRJdGVtcy5wdXNoKGl0ZW0uc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRJdGVtcy5wdXNoKGBcXG4ke2l0ZW0uc3RyfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICAgICAgICAgICAgICBsYXN0WSA9IGl0ZW0udHJhbnNmb3JtWzVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSB0ZXh0SXRlbXMuam9pbih0aGlzLnBhcnNlZEl0ZW1TZXBhcmF0b3IpO1xuICAgICAgICAgICAgZG9jdW1lbnRzLnB1c2gobmV3IERvY3VtZW50KHtcbiAgICAgICAgICAgICAgICBwYWdlQ29udGVudDogdGV4dCxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAuLi5tZXRhZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcGRmOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5mbzogbWV0YT8uaW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtZXRhPy5tZXRhZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsUGFnZXM6IHBkZi5udW1QYWdlcyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbG9jOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlTnVtYmVyOiBpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3BsaXRQYWdlcykge1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50cztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9jdW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBuZXcgRG9jdW1lbnQoe1xuICAgICAgICAgICAgICAgIHBhZ2VDb250ZW50OiBmb3JtYXREb2N1bWVudHNBc1N0cmluZyhkb2N1bWVudHMpLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLm1ldGFkYXRhLFxuICAgICAgICAgICAgICAgICAgICBwZGY6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvOiBtZXRhPy5pbmZvLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1ldGE/Lm1ldGFkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxQYWdlczogcGRmLm51bVBhZ2VzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXTtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBQREZMb2FkZXJJbXBvcnRzKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgZGVmYXVsdDogbW9kIH0gPSBhd2FpdCBpbXBvcnQoXCJwZGYtcGFyc2UvbGliL3BkZi5qcy92MS4xMC4xMDAvYnVpbGQvcGRmLmpzXCIpO1xuICAgICAgICBjb25zdCB7IGdldERvY3VtZW50LCB2ZXJzaW9uIH0gPSBtb2Q7XG4gICAgICAgIHJldHVybiB7IGdldERvY3VtZW50LCB2ZXJzaW9uIH07XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBsb2FkIHBkZi1wYXJzZS4gUGxlYXNlIGluc3RhbGwgaXQgd2l0aCBlZy4gYG5wbSBpbnN0YWxsIHBkZi1wYXJzZWAuXCIpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/fs/pdf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/text.js":
/*!*****************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/fs/text.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextLoader: () => (/* binding */ TextLoader)\n/* harmony export */ });\n/* harmony import */ var _document_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../document.js */ \"(rsc)/./node_modules/langchain/dist/document.js\");\n/* harmony import */ var _util_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/env.js */ \"(rsc)/./node_modules/langchain/dist/util/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/base.js\");\n\n\n\n/**\n * A class that extends the `BaseDocumentLoader` class. It represents a\n * document loader that loads documents from a text file. The `load()`\n * method is implemented to read the text from the file or blob, parse it\n * using the `parse()` method, and create a `Document` instance for each\n * parsed page. The metadata includes the source of the text (file path or\n * blob) and, if there are multiple pages, the line number of each page.\n * @example\n * ```typescript\n * const loader = new TextLoader(\"src/document_loaders/example_data/example.txt\");\n * const docs = await loader.load();\n * ```\n */\nclass TextLoader extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseDocumentLoader {\n    constructor(filePathOrBlob) {\n        super();\n        Object.defineProperty(this, \"filePathOrBlob\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: filePathOrBlob\n        });\n    }\n    /**\n     * A protected method that takes a `raw` string as a parameter and returns\n     * a promise that resolves to an array containing the raw text as a single\n     * element.\n     * @param raw The raw text to be parsed.\n     * @returns A promise that resolves to an array containing the raw text as a single element.\n     */\n    async parse(raw) {\n        return [raw];\n    }\n    /**\n     * A method that loads the text file or blob and returns a promise that\n     * resolves to an array of `Document` instances. It reads the text from\n     * the file or blob using the `readFile` function from the\n     * `node:fs/promises` module or the `text()` method of the blob. It then\n     * parses the text using the `parse()` method and creates a `Document`\n     * instance for each parsed page. The metadata includes the source of the\n     * text (file path or blob) and, if there are multiple pages, the line\n     * number of each page.\n     * @returns A promise that resolves to an array of `Document` instances.\n     */\n    async load() {\n        let text;\n        let metadata;\n        if (typeof this.filePathOrBlob === \"string\") {\n            const { readFile } = await TextLoader.imports();\n            text = await readFile(this.filePathOrBlob, \"utf8\");\n            metadata = { source: this.filePathOrBlob };\n        }\n        else {\n            text = await this.filePathOrBlob.text();\n            metadata = { source: \"blob\", blobType: this.filePathOrBlob.type };\n        }\n        const parsed = await this.parse(text);\n        parsed.forEach((pageContent, i) => {\n            if (typeof pageContent !== \"string\") {\n                throw new Error(`Expected string, at position ${i} got ${typeof pageContent}`);\n            }\n        });\n        return parsed.map((pageContent, i) => new _document_js__WEBPACK_IMPORTED_MODULE_0__.Document({\n            pageContent,\n            metadata: parsed.length === 1\n                ? metadata\n                : {\n                    ...metadata,\n                    line: i + 1,\n                },\n        }));\n    }\n    /**\n     * A static method that imports the `readFile` function from the\n     * `node:fs/promises` module. It is used to dynamically import the\n     * function when needed. If the import fails, it throws an error\n     * indicating that the `fs/promises` module is not available in the\n     * current environment.\n     * @returns A promise that resolves to an object containing the `readFile` function from the `node:fs/promises` module.\n     */\n    static async imports() {\n        try {\n            const { readFile } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:fs/promises */ \"node:fs/promises\", 19));\n            return { readFile };\n        }\n        catch (e) {\n            console.error(e);\n            throw new Error(`Failed to load fs/promises. TextLoader available only on environment 'node'. It appears you are running environment '${(0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnv)()}'. See https://<link to docs> for alternatives.`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9mcy90ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNkM7QUFDRjtBQUNLO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08seUJBQXlCLHdEQUFrQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFdBQVc7QUFDL0I7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLEdBQUcsTUFBTSxtQkFBbUI7QUFDNUY7QUFDQSxTQUFTO0FBQ1Qsa0RBQWtELGtEQUFRO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixXQUFXLFFBQVEsc0lBQTBCO0FBQ2pFLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxvSkFBb0osb0RBQU0sR0FBRztBQUM3SjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0Ym90LXVpLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2RvY3VtZW50X2xvYWRlcnMvZnMvdGV4dC5qcz80NzQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvY3VtZW50IH0gZnJvbSBcIi4uLy4uL2RvY3VtZW50LmpzXCI7XG5pbXBvcnQgeyBnZXRFbnYgfSBmcm9tIFwiLi4vLi4vdXRpbC9lbnYuanNcIjtcbmltcG9ydCB7IEJhc2VEb2N1bWVudExvYWRlciB9IGZyb20gXCIuLi9iYXNlLmpzXCI7XG4vKipcbiAqIEEgY2xhc3MgdGhhdCBleHRlbmRzIHRoZSBgQmFzZURvY3VtZW50TG9hZGVyYCBjbGFzcy4gSXQgcmVwcmVzZW50cyBhXG4gKiBkb2N1bWVudCBsb2FkZXIgdGhhdCBsb2FkcyBkb2N1bWVudHMgZnJvbSBhIHRleHQgZmlsZS4gVGhlIGBsb2FkKClgXG4gKiBtZXRob2QgaXMgaW1wbGVtZW50ZWQgdG8gcmVhZCB0aGUgdGV4dCBmcm9tIHRoZSBmaWxlIG9yIGJsb2IsIHBhcnNlIGl0XG4gKiB1c2luZyB0aGUgYHBhcnNlKClgIG1ldGhvZCwgYW5kIGNyZWF0ZSBhIGBEb2N1bWVudGAgaW5zdGFuY2UgZm9yIGVhY2hcbiAqIHBhcnNlZCBwYWdlLiBUaGUgbWV0YWRhdGEgaW5jbHVkZXMgdGhlIHNvdXJjZSBvZiB0aGUgdGV4dCAoZmlsZSBwYXRoIG9yXG4gKiBibG9iKSBhbmQsIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBwYWdlcywgdGhlIGxpbmUgbnVtYmVyIG9mIGVhY2ggcGFnZS5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBsb2FkZXIgPSBuZXcgVGV4dExvYWRlcihcInNyYy9kb2N1bWVudF9sb2FkZXJzL2V4YW1wbGVfZGF0YS9leGFtcGxlLnR4dFwiKTtcbiAqIGNvbnN0IGRvY3MgPSBhd2FpdCBsb2FkZXIubG9hZCgpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBUZXh0TG9hZGVyIGV4dGVuZHMgQmFzZURvY3VtZW50TG9hZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWxlUGF0aE9yQmxvYikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJmaWxlUGF0aE9yQmxvYlwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZmlsZVBhdGhPckJsb2JcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvdGVjdGVkIG1ldGhvZCB0aGF0IHRha2VzIGEgYHJhd2Agc3RyaW5nIGFzIGEgcGFyYW1ldGVyIGFuZCByZXR1cm5zXG4gICAgICogYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gYXJyYXkgY29udGFpbmluZyB0aGUgcmF3IHRleHQgYXMgYSBzaW5nbGVcbiAgICAgKiBlbGVtZW50LlxuICAgICAqIEBwYXJhbSByYXcgVGhlIHJhdyB0ZXh0IHRvIGJlIHBhcnNlZC5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBjb250YWluaW5nIHRoZSByYXcgdGV4dCBhcyBhIHNpbmdsZSBlbGVtZW50LlxuICAgICAqL1xuICAgIGFzeW5jIHBhcnNlKHJhdykge1xuICAgICAgICByZXR1cm4gW3Jhd107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgbWV0aG9kIHRoYXQgbG9hZHMgdGhlIHRleHQgZmlsZSBvciBibG9iIGFuZCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0XG4gICAgICogcmVzb2x2ZXMgdG8gYW4gYXJyYXkgb2YgYERvY3VtZW50YCBpbnN0YW5jZXMuIEl0IHJlYWRzIHRoZSB0ZXh0IGZyb21cbiAgICAgKiB0aGUgZmlsZSBvciBibG9iIHVzaW5nIHRoZSBgcmVhZEZpbGVgIGZ1bmN0aW9uIGZyb20gdGhlXG4gICAgICogYG5vZGU6ZnMvcHJvbWlzZXNgIG1vZHVsZSBvciB0aGUgYHRleHQoKWAgbWV0aG9kIG9mIHRoZSBibG9iLiBJdCB0aGVuXG4gICAgICogcGFyc2VzIHRoZSB0ZXh0IHVzaW5nIHRoZSBgcGFyc2UoKWAgbWV0aG9kIGFuZCBjcmVhdGVzIGEgYERvY3VtZW50YFxuICAgICAqIGluc3RhbmNlIGZvciBlYWNoIHBhcnNlZCBwYWdlLiBUaGUgbWV0YWRhdGEgaW5jbHVkZXMgdGhlIHNvdXJjZSBvZiB0aGVcbiAgICAgKiB0ZXh0IChmaWxlIHBhdGggb3IgYmxvYikgYW5kLCBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgcGFnZXMsIHRoZSBsaW5lXG4gICAgICogbnVtYmVyIG9mIGVhY2ggcGFnZS5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBvZiBgRG9jdW1lbnRgIGluc3RhbmNlcy5cbiAgICAgKi9cbiAgICBhc3luYyBsb2FkKCkge1xuICAgICAgICBsZXQgdGV4dDtcbiAgICAgICAgbGV0IG1ldGFkYXRhO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZmlsZVBhdGhPckJsb2IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcmVhZEZpbGUgfSA9IGF3YWl0IFRleHRMb2FkZXIuaW1wb3J0cygpO1xuICAgICAgICAgICAgdGV4dCA9IGF3YWl0IHJlYWRGaWxlKHRoaXMuZmlsZVBhdGhPckJsb2IsIFwidXRmOFwiKTtcbiAgICAgICAgICAgIG1ldGFkYXRhID0geyBzb3VyY2U6IHRoaXMuZmlsZVBhdGhPckJsb2IgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRleHQgPSBhd2FpdCB0aGlzLmZpbGVQYXRoT3JCbG9iLnRleHQoKTtcbiAgICAgICAgICAgIG1ldGFkYXRhID0geyBzb3VyY2U6IFwiYmxvYlwiLCBibG9iVHlwZTogdGhpcy5maWxlUGF0aE9yQmxvYi50eXBlIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkID0gYXdhaXQgdGhpcy5wYXJzZSh0ZXh0KTtcbiAgICAgICAgcGFyc2VkLmZvckVhY2goKHBhZ2VDb250ZW50LCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhZ2VDb250ZW50ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBzdHJpbmcsIGF0IHBvc2l0aW9uICR7aX0gZ290ICR7dHlwZW9mIHBhZ2VDb250ZW50fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZC5tYXAoKHBhZ2VDb250ZW50LCBpKSA9PiBuZXcgRG9jdW1lbnQoe1xuICAgICAgICAgICAgcGFnZUNvbnRlbnQsXG4gICAgICAgICAgICBtZXRhZGF0YTogcGFyc2VkLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgICAgID8gbWV0YWRhdGFcbiAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4ubWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IGkgKyAxLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBzdGF0aWMgbWV0aG9kIHRoYXQgaW1wb3J0cyB0aGUgYHJlYWRGaWxlYCBmdW5jdGlvbiBmcm9tIHRoZVxuICAgICAqIGBub2RlOmZzL3Byb21pc2VzYCBtb2R1bGUuIEl0IGlzIHVzZWQgdG8gZHluYW1pY2FsbHkgaW1wb3J0IHRoZVxuICAgICAqIGZ1bmN0aW9uIHdoZW4gbmVlZGVkLiBJZiB0aGUgaW1wb3J0IGZhaWxzLCBpdCB0aHJvd3MgYW4gZXJyb3JcbiAgICAgKiBpbmRpY2F0aW5nIHRoYXQgdGhlIGBmcy9wcm9taXNlc2AgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlXG4gICAgICogY3VycmVudCBlbnZpcm9ubWVudC5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHJlYWRGaWxlYCBmdW5jdGlvbiBmcm9tIHRoZSBgbm9kZTpmcy9wcm9taXNlc2AgbW9kdWxlLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBpbXBvcnRzKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyByZWFkRmlsZSB9ID0gYXdhaXQgaW1wb3J0KFwibm9kZTpmcy9wcm9taXNlc1wiKTtcbiAgICAgICAgICAgIHJldHVybiB7IHJlYWRGaWxlIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIGZzL3Byb21pc2VzLiBUZXh0TG9hZGVyIGF2YWlsYWJsZSBvbmx5IG9uIGVudmlyb25tZW50ICdub2RlJy4gSXQgYXBwZWFycyB5b3UgYXJlIHJ1bm5pbmcgZW52aXJvbm1lbnQgJyR7Z2V0RW52KCl9Jy4gU2VlIGh0dHBzOi8vPGxpbmsgdG8gZG9jcz4gZm9yIGFsdGVybmF0aXZlcy5gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/fs/text.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/schema/document.js":
/*!********************************************************!*\
  !*** ./node_modules/langchain/dist/schema/document.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentTransformer: () => (/* reexport safe */ _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.BaseDocumentTransformer),\n/* harmony export */   MappingDocumentTransformer: () => (/* reexport safe */ _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.MappingDocumentTransformer)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/@langchain/core/documents.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc2NoZW1hL2RvY3VtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRyIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRib3QtdWkvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc2NoZW1hL2RvY3VtZW50LmpzPzBhMjkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgQmFzZURvY3VtZW50VHJhbnNmb3JtZXIsIE1hcHBpbmdEb2N1bWVudFRyYW5zZm9ybWVyLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvZG9jdW1lbnRzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/schema/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/text_splitter.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/text_splitter.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CharacterTextSplitter: () => (/* binding */ CharacterTextSplitter),\n/* harmony export */   LatexTextSplitter: () => (/* binding */ LatexTextSplitter),\n/* harmony export */   MarkdownTextSplitter: () => (/* binding */ MarkdownTextSplitter),\n/* harmony export */   RecursiveCharacterTextSplitter: () => (/* binding */ RecursiveCharacterTextSplitter),\n/* harmony export */   SupportedTextSplitterLanguages: () => (/* binding */ SupportedTextSplitterLanguages),\n/* harmony export */   TextSplitter: () => (/* binding */ TextSplitter),\n/* harmony export */   TokenTextSplitter: () => (/* binding */ TokenTextSplitter)\n/* harmony export */ });\n/* harmony import */ var _document_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./document.js */ \"(rsc)/./node_modules/langchain/dist/document.js\");\n/* harmony import */ var _util_tiktoken_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/tiktoken.js */ \"(rsc)/./node_modules/langchain/dist/util/tiktoken.js\");\n/* harmony import */ var _schema_document_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema/document.js */ \"(rsc)/./node_modules/langchain/dist/schema/document.js\");\n\n\n\nclass TextSplitter extends _schema_document_js__WEBPACK_IMPORTED_MODULE_2__.BaseDocumentTransformer {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"document_transformers\", \"text_splitters\"]\n        });\n        Object.defineProperty(this, \"chunkSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1000\n        });\n        Object.defineProperty(this, \"chunkOverlap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 200\n        });\n        Object.defineProperty(this, \"keepSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lengthFunction\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chunkSize = fields?.chunkSize ?? this.chunkSize;\n        this.chunkOverlap = fields?.chunkOverlap ?? this.chunkOverlap;\n        this.keepSeparator = fields?.keepSeparator ?? this.keepSeparator;\n        this.lengthFunction =\n            fields?.lengthFunction ?? ((text) => text.length);\n        if (this.chunkOverlap >= this.chunkSize) {\n            throw new Error(\"Cannot have chunkOverlap >= chunkSize\");\n        }\n    }\n    async transformDocuments(documents, chunkHeaderOptions = {}) {\n        return this.splitDocuments(documents, chunkHeaderOptions);\n    }\n    splitOnSeparator(text, separator) {\n        let splits;\n        if (separator) {\n            if (this.keepSeparator) {\n                const regexEscapedSeparator = separator.replace(/[/\\-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n                splits = text.split(new RegExp(`(?=${regexEscapedSeparator})`));\n            }\n            else {\n                splits = text.split(separator);\n            }\n        }\n        else {\n            splits = text.split(\"\");\n        }\n        return splits.filter((s) => s !== \"\");\n    }\n    async createDocuments(texts, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    metadatas = [], chunkHeaderOptions = {}) {\n        // if no metadata is provided, we create an empty one for each text\n        const _metadatas = metadatas.length > 0 ? metadatas : new Array(texts.length).fill({});\n        const { chunkHeader = \"\", chunkOverlapHeader = \"(cont'd) \", appendChunkOverlapHeader = false, } = chunkHeaderOptions;\n        const documents = new Array();\n        for (let i = 0; i < texts.length; i += 1) {\n            const text = texts[i];\n            let lineCounterIndex = 1;\n            let prevChunk = null;\n            let indexPrevChunk = -1;\n            for (const chunk of await this.splitText(text)) {\n                let pageContent = chunkHeader;\n                // we need to count the \\n that are in the text before getting removed by the splitting\n                const indexChunk = text.indexOf(chunk, indexPrevChunk + 1);\n                if (prevChunk === null) {\n                    const newLinesBeforeFirstChunk = this.numberOfNewLines(text, 0, indexChunk);\n                    lineCounterIndex += newLinesBeforeFirstChunk;\n                }\n                else {\n                    const indexEndPrevChunk = indexPrevChunk + (await this.lengthFunction(prevChunk));\n                    if (indexEndPrevChunk < indexChunk) {\n                        const numberOfIntermediateNewLines = this.numberOfNewLines(text, indexEndPrevChunk, indexChunk);\n                        lineCounterIndex += numberOfIntermediateNewLines;\n                    }\n                    else if (indexEndPrevChunk > indexChunk) {\n                        const numberOfIntermediateNewLines = this.numberOfNewLines(text, indexChunk, indexEndPrevChunk);\n                        lineCounterIndex -= numberOfIntermediateNewLines;\n                    }\n                    if (appendChunkOverlapHeader) {\n                        pageContent += chunkOverlapHeader;\n                    }\n                }\n                const newLinesCount = this.numberOfNewLines(chunk);\n                const loc = _metadatas[i].loc && typeof _metadatas[i].loc === \"object\"\n                    ? { ..._metadatas[i].loc }\n                    : {};\n                loc.lines = {\n                    from: lineCounterIndex,\n                    to: lineCounterIndex + newLinesCount,\n                };\n                const metadataWithLinesNumber = {\n                    ..._metadatas[i],\n                    loc,\n                };\n                pageContent += chunk;\n                documents.push(new _document_js__WEBPACK_IMPORTED_MODULE_0__.Document({\n                    pageContent,\n                    metadata: metadataWithLinesNumber,\n                }));\n                lineCounterIndex += newLinesCount;\n                prevChunk = chunk;\n                indexPrevChunk = indexChunk;\n            }\n        }\n        return documents;\n    }\n    numberOfNewLines(text, start, end) {\n        const textSection = text.slice(start, end);\n        return (textSection.match(/\\n/g) || []).length;\n    }\n    async splitDocuments(documents, chunkHeaderOptions = {}) {\n        const selectedDocuments = documents.filter((doc) => doc.pageContent !== undefined);\n        const texts = selectedDocuments.map((doc) => doc.pageContent);\n        const metadatas = selectedDocuments.map((doc) => doc.metadata);\n        return this.createDocuments(texts, metadatas, chunkHeaderOptions);\n    }\n    joinDocs(docs, separator) {\n        const text = docs.join(separator).trim();\n        return text === \"\" ? null : text;\n    }\n    async mergeSplits(splits, separator) {\n        const docs = [];\n        const currentDoc = [];\n        let total = 0;\n        for (const d of splits) {\n            const _len = await this.lengthFunction(d);\n            if (total + _len + (currentDoc.length > 0 ? separator.length : 0) >\n                this.chunkSize) {\n                if (total > this.chunkSize) {\n                    console.warn(`Created a chunk of size ${total}, +\nwhich is longer than the specified ${this.chunkSize}`);\n                }\n                if (currentDoc.length > 0) {\n                    const doc = this.joinDocs(currentDoc, separator);\n                    if (doc !== null) {\n                        docs.push(doc);\n                    }\n                    // Keep on popping if:\n                    // - we have a larger chunk than in the chunk overlap\n                    // - or if we still have any chunks and the length is long\n                    while (total > this.chunkOverlap ||\n                        (total + _len > this.chunkSize && total > 0)) {\n                        total -= await this.lengthFunction(currentDoc[0]);\n                        currentDoc.shift();\n                    }\n                }\n            }\n            currentDoc.push(d);\n            total += _len;\n        }\n        const doc = this.joinDocs(currentDoc, separator);\n        if (doc !== null) {\n            docs.push(doc);\n        }\n        return docs;\n    }\n}\nclass CharacterTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"CharacterTextSplitter\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"separator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        this.separator = fields?.separator ?? this.separator;\n    }\n    async splitText(text) {\n        // First we naively split the large input into a bunch of smaller ones.\n        const splits = this.splitOnSeparator(text, this.separator);\n        return this.mergeSplits(splits, this.keepSeparator ? \"\" : this.separator);\n    }\n}\nconst SupportedTextSplitterLanguages = [\n    \"cpp\",\n    \"go\",\n    \"java\",\n    \"js\",\n    \"php\",\n    \"proto\",\n    \"python\",\n    \"rst\",\n    \"ruby\",\n    \"rust\",\n    \"scala\",\n    \"swift\",\n    \"markdown\",\n    \"latex\",\n    \"html\",\n    \"sol\",\n];\nclass RecursiveCharacterTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"RecursiveCharacterTextSplitter\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"separators\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"\\n\\n\", \"\\n\", \" \", \"\"]\n        });\n        this.separators = fields?.separators ?? this.separators;\n        this.keepSeparator = fields?.keepSeparator ?? true;\n    }\n    async _splitText(text, separators) {\n        const finalChunks = [];\n        // Get appropriate separator to use\n        let separator = separators[separators.length - 1];\n        let newSeparators;\n        for (let i = 0; i < separators.length; i += 1) {\n            const s = separators[i];\n            if (s === \"\") {\n                separator = s;\n                break;\n            }\n            if (text.includes(s)) {\n                separator = s;\n                newSeparators = separators.slice(i + 1);\n                break;\n            }\n        }\n        // Now that we have the separator, split the text\n        const splits = this.splitOnSeparator(text, separator);\n        // Now go merging things, recursively splitting longer texts.\n        let goodSplits = [];\n        const _separator = this.keepSeparator ? \"\" : separator;\n        for (const s of splits) {\n            if ((await this.lengthFunction(s)) < this.chunkSize) {\n                goodSplits.push(s);\n            }\n            else {\n                if (goodSplits.length) {\n                    const mergedText = await this.mergeSplits(goodSplits, _separator);\n                    finalChunks.push(...mergedText);\n                    goodSplits = [];\n                }\n                if (!newSeparators) {\n                    finalChunks.push(s);\n                }\n                else {\n                    const otherInfo = await this._splitText(s, newSeparators);\n                    finalChunks.push(...otherInfo);\n                }\n            }\n        }\n        if (goodSplits.length) {\n            const mergedText = await this.mergeSplits(goodSplits, _separator);\n            finalChunks.push(...mergedText);\n        }\n        return finalChunks;\n    }\n    async splitText(text) {\n        return this._splitText(text, this.separators);\n    }\n    static fromLanguage(language, options) {\n        return new RecursiveCharacterTextSplitter({\n            ...options,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(language),\n        });\n    }\n    static getSeparatorsForLanguage(language) {\n        if (language === \"cpp\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along function definitions\n                \"\\nvoid \",\n                \"\\nint \",\n                \"\\nfloat \",\n                \"\\ndouble \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"go\") {\n            return [\n                // Split along function definitions\n                \"\\nfunc \",\n                \"\\nvar \",\n                \"\\nconst \",\n                \"\\ntype \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"java\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along method definitions\n                \"\\npublic \",\n                \"\\nprotected \",\n                \"\\nprivate \",\n                \"\\nstatic \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"js\") {\n            return [\n                // Split along function definitions\n                \"\\nfunction \",\n                \"\\nconst \",\n                \"\\nlet \",\n                \"\\nvar \",\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                \"\\ndefault \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"php\") {\n            return [\n                // Split along function definitions\n                \"\\nfunction \",\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nforeach \",\n                \"\\nwhile \",\n                \"\\ndo \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"proto\") {\n            return [\n                // Split along message definitions\n                \"\\nmessage \",\n                // Split along service definitions\n                \"\\nservice \",\n                // Split along enum definitions\n                \"\\nenum \",\n                // Split along option definitions\n                \"\\noption \",\n                // Split along import statements\n                \"\\nimport \",\n                // Split along syntax declarations\n                \"\\nsyntax \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"python\") {\n            return [\n                // First, try to split along class definitions\n                \"\\nclass \",\n                \"\\ndef \",\n                \"\\n\\tdef \",\n                // Now split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"rst\") {\n            return [\n                // Split along section titles\n                \"\\n===\\n\",\n                \"\\n---\\n\",\n                \"\\n***\\n\",\n                // Split along directive markers\n                \"\\n.. \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"ruby\") {\n            return [\n                // Split along method definitions\n                \"\\ndef \",\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nunless \",\n                \"\\nwhile \",\n                \"\\nfor \",\n                \"\\ndo \",\n                \"\\nbegin \",\n                \"\\nrescue \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"rust\") {\n            return [\n                // Split along function definitions\n                \"\\nfn \",\n                \"\\nconst \",\n                \"\\nlet \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nwhile \",\n                \"\\nfor \",\n                \"\\nloop \",\n                \"\\nmatch \",\n                \"\\nconst \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"scala\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                \"\\nobject \",\n                // Split along method definitions\n                \"\\ndef \",\n                \"\\nval \",\n                \"\\nvar \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nmatch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"swift\") {\n            return [\n                // Split along function definitions\n                \"\\nfunc \",\n                // Split along class definitions\n                \"\\nclass \",\n                \"\\nstruct \",\n                \"\\nenum \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\ndo \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"markdown\") {\n            return [\n                // First, try to split along Markdown headings (starting with level 2)\n                \"\\n## \",\n                \"\\n### \",\n                \"\\n#### \",\n                \"\\n##### \",\n                \"\\n###### \",\n                // Note the alternative syntax for headings (below) is not handled here\n                // Heading level 2\n                // ---------------\n                // End of code block\n                \"```\\n\\n\",\n                // Horizontal lines\n                \"\\n\\n***\\n\\n\",\n                \"\\n\\n---\\n\\n\",\n                \"\\n\\n___\\n\\n\",\n                // Note that this splitter doesn't handle horizontal lines defined\n                // by *three or more* of ***, ---, or ___, but this is not handled\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"latex\") {\n            return [\n                // First, try to split along Latex sections\n                \"\\n\\\\chapter{\",\n                \"\\n\\\\section{\",\n                \"\\n\\\\subsection{\",\n                \"\\n\\\\subsubsection{\",\n                // Now split by environments\n                \"\\n\\\\begin{enumerate}\",\n                \"\\n\\\\begin{itemize}\",\n                \"\\n\\\\begin{description}\",\n                \"\\n\\\\begin{list}\",\n                \"\\n\\\\begin{quote}\",\n                \"\\n\\\\begin{quotation}\",\n                \"\\n\\\\begin{verse}\",\n                \"\\n\\\\begin{verbatim}\",\n                // Now split by math environments\n                \"\\n\\\\begin{align}\",\n                \"$$\",\n                \"$\",\n                // Now split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"html\") {\n            return [\n                // First, try to split along HTML tags\n                \"<body>\",\n                \"<div>\",\n                \"<p>\",\n                \"<br>\",\n                \"<li>\",\n                \"<h1>\",\n                \"<h2>\",\n                \"<h3>\",\n                \"<h4>\",\n                \"<h5>\",\n                \"<h6>\",\n                \"<span>\",\n                \"<table>\",\n                \"<tr>\",\n                \"<td>\",\n                \"<th>\",\n                \"<ul>\",\n                \"<ol>\",\n                \"<header>\",\n                \"<footer>\",\n                \"<nav>\",\n                // Head\n                \"<head>\",\n                \"<style>\",\n                \"<script>\",\n                \"<meta>\",\n                \"<title>\",\n                // Normal type of lines\n                \" \",\n                \"\",\n            ];\n        }\n        else if (language === \"sol\") {\n            return [\n                // Split along compiler informations definitions\n                \"\\npragma \",\n                \"\\nusing \",\n                // Split along contract definitions\n                \"\\ncontract \",\n                \"\\ninterface \",\n                \"\\nlibrary \",\n                // Split along method definitions\n                \"\\nconstructor \",\n                \"\\ntype \",\n                \"\\nfunction \",\n                \"\\nevent \",\n                \"\\nmodifier \",\n                \"\\nerror \",\n                \"\\nstruct \",\n                \"\\nenum \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\ndo while \",\n                \"\\nassembly \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\",\n            ];\n        }\n        else {\n            throw new Error(`Language ${language} is not supported.`);\n        }\n    }\n}\n/**\n * Implementation of splitter which looks at tokens.\n */\nclass TokenTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"TokenTextSplitter\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"encodingName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"allowedSpecial\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"disallowedSpecial\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tokenizer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.encodingName = fields?.encodingName ?? \"gpt2\";\n        this.allowedSpecial = fields?.allowedSpecial ?? [];\n        this.disallowedSpecial = fields?.disallowedSpecial ?? \"all\";\n    }\n    async splitText(text) {\n        if (!this.tokenizer) {\n            this.tokenizer = await (0,_util_tiktoken_js__WEBPACK_IMPORTED_MODULE_1__.getEncoding)(this.encodingName);\n        }\n        const splits = [];\n        const input_ids = this.tokenizer.encode(text, this.allowedSpecial, this.disallowedSpecial);\n        let start_idx = 0;\n        let cur_idx = Math.min(start_idx + this.chunkSize, input_ids.length);\n        let chunk_ids = input_ids.slice(start_idx, cur_idx);\n        while (start_idx < input_ids.length) {\n            splits.push(this.tokenizer.decode(chunk_ids));\n            start_idx += this.chunkSize - this.chunkOverlap;\n            cur_idx = Math.min(start_idx + this.chunkSize, input_ids.length);\n            chunk_ids = input_ids.slice(start_idx, cur_idx);\n        }\n        return splits;\n    }\n}\nclass MarkdownTextSplitter extends RecursiveCharacterTextSplitter {\n    constructor(fields) {\n        super({\n            ...fields,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(\"markdown\"),\n        });\n    }\n}\nclass LatexTextSplitter extends RecursiveCharacterTextSplitter {\n    constructor(fields) {\n        super({\n            ...fields,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(\"latex\"),\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/text_splitter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/document.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/util/document.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatDocumentsAsString: () => (/* binding */ formatDocumentsAsString)\n/* harmony export */ });\n/**\n * Given a list of documents, this util formats their contents\n * into a string, separated by newlines.\n *\n * @param documents\n * @returns A string of the documents page content, separated by newlines.\n */\nconst formatDocumentsAsString = (documents) => documents.map((doc) => doc.pageContent).join(\"\\n\\n\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9kb2N1bWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRib3QtdWkvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9kb2N1bWVudC5qcz82MzVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2l2ZW4gYSBsaXN0IG9mIGRvY3VtZW50cywgdGhpcyB1dGlsIGZvcm1hdHMgdGhlaXIgY29udGVudHNcbiAqIGludG8gYSBzdHJpbmcsIHNlcGFyYXRlZCBieSBuZXdsaW5lcy5cbiAqXG4gKiBAcGFyYW0gZG9jdW1lbnRzXG4gKiBAcmV0dXJucyBBIHN0cmluZyBvZiB0aGUgZG9jdW1lbnRzIHBhZ2UgY29udGVudCwgc2VwYXJhdGVkIGJ5IG5ld2xpbmVzLlxuICovXG5leHBvcnQgY29uc3QgZm9ybWF0RG9jdW1lbnRzQXNTdHJpbmcgPSAoZG9jdW1lbnRzKSA9PiBkb2N1bWVudHMubWFwKChkb2MpID0+IGRvYy5wYWdlQ29udGVudCkuam9pbihcIlxcblxcblwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/env.js":
/*!*************************************************!*\
  !*** ./node_modules/langchain/dist/util/env.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* reexport safe */ _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* reexport safe */ _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* reexport safe */ _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getRuntimeEnvironment),\n/* harmony export */   isBrowser: () => (/* reexport safe */ _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser),\n/* harmony export */   isDeno: () => (/* reexport safe */ _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.isDeno),\n/* harmony export */   isJsDom: () => (/* reexport safe */ _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.isJsDom),\n/* harmony export */   isNode: () => (/* reexport safe */ _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.isNode),\n/* harmony export */   isWebWorker: () => (/* reexport safe */ _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.isWebWorker)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQW9KIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hhdGJvdC11aS8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC91dGlsL2Vudi5qcz9mNTBmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGlzQnJvd3NlciwgaXNXZWJXb3JrZXIsIGlzSnNEb20sIGlzRGVubywgaXNOb2RlLCBnZXRFbnYsIGdldFJ1bnRpbWVFbnZpcm9ubWVudCwgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZSwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2VudlwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/tiktoken.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/util/tiktoken.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodingForModel: () => (/* reexport safe */ _langchain_core_utils_tiktoken__WEBPACK_IMPORTED_MODULE_0__.encodingForModel),\n/* harmony export */   getEncoding: () => (/* reexport safe */ _langchain_core_utils_tiktoken__WEBPACK_IMPORTED_MODULE_0__.getEncoding)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_tiktoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/tiktoken */ \"(rsc)/./node_modules/@langchain/core/utils/tiktoken.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC90aWt0b2tlbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0Ym90LXVpLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L3V0aWwvdGlrdG9rZW4uanM/MWUyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL3Rpa3Rva2VuXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/tiktoken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/document_loaders/fs/csv.js":
/*!***********************************************************!*\
  !*** ./node_modules/langchain/document_loaders/fs/csv.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSVLoader: () => (/* reexport safe */ _dist_document_loaders_fs_csv_js__WEBPACK_IMPORTED_MODULE_0__.CSVLoader)
/* harmony export */ });
/* harmony import */ var _dist_document_loaders_fs_csv_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dist/document_loaders/fs/csv.js */ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/csv.js");


/***/ }),

/***/ "(rsc)/./node_modules/langchain/document_loaders/fs/json.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/document_loaders/fs/json.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   JSONLinesLoader: () => (/* reexport safe */ _dist_document_loaders_fs_json_js__WEBPACK_IMPORTED_MODULE_0__.JSONLinesLoader),
/* harmony export */   JSONLoader: () => (/* reexport safe */ _dist_document_loaders_fs_json_js__WEBPACK_IMPORTED_MODULE_0__.JSONLoader)
/* harmony export */ });
/* harmony import */ var _dist_document_loaders_fs_json_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dist/document_loaders/fs/json.js */ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/json.js");


/***/ }),

/***/ "(rsc)/./node_modules/langchain/document_loaders/fs/pdf.js":
/*!***********************************************************!*\
  !*** ./node_modules/langchain/document_loaders/fs/pdf.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PDFLoader: () => (/* reexport safe */ _dist_document_loaders_fs_pdf_js__WEBPACK_IMPORTED_MODULE_0__.PDFLoader)
/* harmony export */ });
/* harmony import */ var _dist_document_loaders_fs_pdf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dist/document_loaders/fs/pdf.js */ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/pdf.js");


/***/ }),

/***/ "(rsc)/./node_modules/langchain/text_splitter.js":
/*!*************************************************!*\
  !*** ./node_modules/langchain/text_splitter.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CharacterTextSplitter: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.CharacterTextSplitter),
/* harmony export */   LatexTextSplitter: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.LatexTextSplitter),
/* harmony export */   MarkdownTextSplitter: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.MarkdownTextSplitter),
/* harmony export */   RecursiveCharacterTextSplitter: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.RecursiveCharacterTextSplitter),
/* harmony export */   SupportedTextSplitterLanguages: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.SupportedTextSplitterLanguages),
/* harmony export */   TextSplitter: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.TextSplitter),
/* harmony export */   TokenTextSplitter: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.TokenTextSplitter)
/* harmony export */ });
/* harmony import */ var _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/text_splitter.js */ "(rsc)/./node_modules/langchain/dist/text_splitter.js");


/***/ })

};
;